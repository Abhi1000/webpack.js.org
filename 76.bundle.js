webpackJsonp([76],{311:function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0}),s.default='<h2 id="install">Install<a href="#install" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev css-loader</code></pre>\n<h2 id="usage">Usage<a href="#usage" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>The <code>css-loader</code> interprets <code>@import</code> and <code>url()</code> like <code>import/require()</code>\nand will resolve them.</p>\n<p>Good loaders for requiring your assets are the undefined\nand the undefined which you should specify in your config (see undefined).</p>\n<p><strong>file.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> css <span class="token keyword">from</span> <span class="token string">\'file.css\'</span><span class="token punctuation">;</span></code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id=""></h2>\n<p>You can also use the css-loader results directly as string, such as in Angular\'s component style.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token punctuation">{</span>\n   test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n   use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n     <span class="token string">\'to-string-loader\'</span><span class="token punctuation">,</span>\n     <span class="token string">\'css-loader\'</span>\n   <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n<p>or</p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> css <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./test.css\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {String}</span></code></pre>\n<p>If there are SourceMaps, they will also be included in the result string.</p>\n<p>If, for one reason or another, you need to extract CSS as a\nplain string resource (i.e. not wrapped in a JS module) you\nmight want to check out the undefined.\nIt\'s useful when you, for instance, need to post process the CSS as a string.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token punctuation">{</span>\n   test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n   use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n     <span class="token string">\'handlebars-loader\'</span><span class="token punctuation">,</span> <span class="token comment">// handlebars loader expects raw resource string</span>\n     <span class="token string">\'extract-loader\'</span><span class="token punctuation">,</span>\n     <span class="token string">\'css-loader\'</span>\n   <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n<h2 id="options">Options<a href="#options" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="center">Type</th>\n<th align="center">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong>undefined</strong><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>true</code></td>\n<td align="left">Enable/Disable \n<code>url()</code>\n handling</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong>undefined</strong><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>true</code></td>\n<td align="left">Enable/Disable @import handling</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong>undefined</strong><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Enable/Disable CSS Modules</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong>undefined</strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>[hash:base64]</code></td>\n<td align="left">Configure the generated ident</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong>undefined</strong><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Enable/Disable Sourcemaps</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong>undefined</strong><p class="description mobile"><code>{Boolean\\|String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean\\|String}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Export Classnames in CamelCase</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong>undefined</strong><p class="description mobile"><code>{Number}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Number}</code></td>\n<td align="center"><code>0</code></td>\n<td align="left">Number of loaders applied before CSS loader</td>\n</tr>\n</tbody>\n</table>\n<h3 id="url"><code>url</code><a href="#url" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>To disable <code>url()</code> resolving by <code>css-loader</code> set the option to <code>false</code>.</p>\n<p>To be compatible with existing css files (if not in CSS Module mode).</p>\n<pre><code>url(image.png) => require(\'./image.png\')\nurl(~module/image.png) => require(\'module/image.png\')\n</code></pre>\n<h3 id="import"><code>import</code><a href="#import" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>To disable <code>@import</code> resolving by <code>css-loader</code> set the option to <code>false</code></p>\n<pre><code class="hljs language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token url">url(\'https://fonts.googleapis.com/css?family=Roboto\')</span><span class="token punctuation">;</span></span></code></pre>\n<blockquote>\n<p><em>⚠️ Use with caution, since this disables resolving for <strong>all</strong> <code>@import</code>s, including css modules <code>composes: xxx from \'path/to/file.css\'</code> feature.</em></p>\n</blockquote>\n<h3 id="undefined">undefined<a href="#undefined" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>The query parameter <code>modules</code> enables the <strong>CSS Modules</strong> spec.</p>\n<p>This enables local scoped CSS by default. (You can switch it off with <code>:global(...)</code> or <code>:global</code> for selectors and/or rules.).</p>\n<h4 id="scope"><code>Scope</code><a href="#scope" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>By default CSS exports all classnames into a global selector scope. Styles can be locally scoped to avoid globally scoping styles.</p>\n<p>The syntax <code>:local(.className)</code> can be used to declare <code>className</code> in the local scope. The local identifiers are exported by the module.</p>\n<p>With <code>:local</code> (without brackets) local mode can be switched on for this selector. <code>:global(.className)</code> can be used to declare an explicit global selector. With <code>:global</code> (without brackets) global mode can be switched on for this selector.</p>\n<p>The loader replaces local selectors with unique identifiers. The choosen unique identifiers are exported by the module.</p>\n<pre><code class="hljs language-css"><span class="token selector">:local(.className)</span> <span class="token punctuation">{</span> <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector">:local .className</span> <span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector">:local(.className .subClass)</span> <span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector">:local .className .subClass :global(.global-class-name)</span> <span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>\n<pre><code class="hljs language-css"><span class="token selector">._23_aKvs-b8bW2Vg3fwHozO</span> <span class="token punctuation">{</span> <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector">._23_aKvs-b8bW2Vg3fwHozO</span> <span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector">._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1</span> <span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector">._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1 .global-class-name</span> <span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>\n<blockquote>\n<p>ℹ️ Identifiers are exported</p>\n</blockquote>\n<pre><code class="hljs language-js">exports<span class="token punctuation">.</span>locals <span class="token operator">=</span> <span class="token punctuation">{</span>\n  className<span class="token punctuation">:</span> <span class="token string">\'_23_aKvs-b8bW2Vg3fwHozO\'</span><span class="token punctuation">,</span>\n  subClass<span class="token punctuation">:</span> <span class="token string">\'_13LGdX8RMStbBE9w-t0gZ1\'</span>\n<span class="token punctuation">}</span></code></pre>\n<p>CamelCase is recommended for local selectors. They are easier to use in the within the imported JS module.</p>\n<p><code>url()</code> URLs in block scoped (<code>:local .abc</code>) rules behave like requests in modules.</p>\n<pre><code>file.png => ./file.png\n~module/file.png => module/file.png\n</code></pre>\n<p>You can use <code>:local(#someId)</code>, but this is not recommended. Use classes instead of ids.</p>\n<h4 id="composing"><code>Composing</code><a href="#composing" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>When declaring a local classname you can compose a local class from another local classname.</p>\n<pre><code class="hljs language-css"><span class="token selector">:local(.className)</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">:local(.subClass)</span> <span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> className<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>This doesn\'t result in any change to the CSS itself but exports multiple classnames.</p>\n<pre><code class="hljs language-js">exports<span class="token punctuation">.</span>locals <span class="token operator">=</span> <span class="token punctuation">{</span>\n  className<span class="token punctuation">:</span> <span class="token string">\'_23_aKvs-b8bW2Vg3fwHozO\'</span><span class="token punctuation">,</span>\n  subClass<span class="token punctuation">:</span> <span class="token string">\'_13LGdX8RMStbBE9w-t0gZ1 _23_aKvs-b8bW2Vg3fwHozO\'</span>\n<span class="token punctuation">}</span></code></pre>\n<pre><code class="hljs language-css"><span class="token selector">._23_aKvs-b8bW2Vg3fwHozO</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">._13LGdX8RMStbBE9w-t0gZ1</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<h4 id="importing"><code>Importing</code><a href="#importing" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>To import a local classname from another module.</p>\n<pre><code class="hljs language-css"><span class="token selector">:local(.continueButton)</span> <span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> button from <span class="token string">\'library/button.css\'</span><span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<pre><code class="hljs language-css"><span class="token selector">:local(.nameEdit)</span> <span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> edit highlight from <span class="token string">\'./edit.css\'</span><span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<p>To import from multiple modules use multiple <code>composes:</code> rules.</p>\n<pre><code class="hljs language-css"><span class="token selector">:local(.className)</span> <span class="token punctuation">{</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> edit hightlight from <span class="token string">\'./edit.css\'</span><span class="token punctuation">;</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> button from <span class="token string">\'module/button.css\'</span><span class="token punctuation">;</span>\n  <span class="token property">composes</span><span class="token punctuation">:</span> classFromThisModule<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n<h3 id="localidentname"><code>localIdentName</code><a href="#localidentname" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>You can configure the generated ident with the <code>localIdentName</code> query parameter. See undefined for more information on options.</p>\n<p> <strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        modules<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        localIdentName<span class="token punctuation">:</span> <span class="token string">\'[path][name]__[local]--[hash:base64:5]\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n<p>You can also specify the absolute path to your custom <code>getLocalIdent</code> function to generate classname based on a different schema. This requires <code>webpack >= 2.2.1</code> (it supports functions in the <code>options</code> object).</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    modules<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    localIdentName<span class="token punctuation">:</span> <span class="token string">\'[path][name]__[local]--[hash:base64:5]\'</span><span class="token punctuation">,</span>\n    getLocalIdent<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> localIdentName<span class="token punctuation">,</span> localName<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">\'whatever_random_class_name\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<blockquote>\n<p>ℹ️ For prerendering with extract-text-webpack-plugin you should use <code>css-loader/locals</code> instead of <code>style-loader!css-loader</code> <strong>in the prerendering bundle</strong>. It doesn\'t embed CSS but only exports the identifier mappings.</p>\n</blockquote>\n<h3 id="sourcemap"><code>sourceMap</code><a href="#sourcemap" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>To include source maps set the <code>sourceMap</code> option.</p>\n<p>I. e. the extract-text-webpack-plugin can handle them.</p>\n<p>They are not enabled by default because they expose a runtime overhead and increase in bundle size (JS source maps do not). In addition to that relative paths are buggy and you need to use an absolute public path which include the server URL.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<h3 id="camelcase"><code>camelCase</code><a href="#camelcase" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>By default, the exported JSON keys mirror the class names. If you want to camelize class names (useful in JS), pass the query parameter <code>camelCase</code> to css-loader.</p>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="center">Type</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Description</p></div>\n<div class="content"><p><strong><code>true</code></strong><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="left">Class names will be camelized</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Description</p></div>\n<div class="content"><p><strong><code>\'dashes\'</code></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="left">Only dashes in class names will be camelized</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Description</p></div>\n<div class="content"><p><strong><code>\'only\'</code></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="left">Introduced in \n<code>0.27.1</code>\n. Class names will be camelized, the original class name will be removed from the locals</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Description</p></div>\n<div class="content"><p><strong><code>\'dashesOnly\'</code></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="left">Introduced in \n<code>0.27.1</code>\n. Dashes in class names will be camelized, the original class name will be removed from the locals</td>\n</tr>\n</tbody>\n</table>\n<p><strong>file.css</strong></p>\n<pre><code class="hljs language-css"><span class="token selector">.class-name</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>\n<p><strong>file.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> className <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'file.css\'</span><span class="token punctuation">;</span></code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token punctuation">{</span>\n  loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    camelCase<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<h3 id="importloaders"><code>importLoaders</code><a href="#importloaders" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>The query parameter <code>importLoaders</code> allows to configure how many loaders before <code>css-loader</code> should be applied to <code>@import</code>ed resources.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token punctuation">{</span>\n  test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n  use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        importLoaders<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment">// 0 => no loaders (default); 1 => postcss-loader; 2 => postcss-loader, sass-loader</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">\'postcss-loader\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'sass-loader\'</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n<p>This may change in the future, when the module system (i. e. webpack) supports loader matching by origin.</p>\n<h2 id="examples">Examples<a href="#examples" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<h3 id="assets">Assets<a href="#assets" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>The following <code>webpack.config.js</code> can load CSS files, embed small PNG/JPG/GIF/SVG images as well as fonts as undefined and copy larger files to the output directory.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span> <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/</span><span class="token punctuation">,</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          limit<span class="token punctuation">:</span> <span class="token number">10000</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n<h3 id="extract">Extract<a href="#extract" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>For production builds it\'s recommended to extract the CSS from your bundle being able to use parallel loading of CSS/JS resources later on.\nThis can be achieved by using the undefined to extract the CSS when running in production mode.</p>\n<h2 id="maintainers">Maintainers<a href="#maintainers" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<table>\n  <tbody>\n    <tr>\n      <td align="center">\n        <img width="150" height="150"\n        src="https://github.com/bebraw.png?v=3&s=150">\n        </br>\n        <a href="https://github.com/bebraw">Juho Vepsäläinen</a>\n      </td>\n      <td align="center">\n        <img width="150" height="150"\n        src="https://github.com/d3viant0ne.png?v=3&s=150">\n        </br>\n        <a href="https://github.com/d3viant0ne">Joshua Wiens</a>\n      </td>\n      <td align="center">\n        <img width="150" height="150"\n        src="https://github.com/SpaceK33z.png?v=3&s=150">\n        </br>\n        <a href="https://github.com/SpaceK33z">Kees Kluskens</a>\n      </td>\n      <td align="center">\n        <img width="150" height="150"\n        src="https://github.com/TheLarkInn.png?v=3&s=150">\n        </br>\n        <a href="https://github.com/TheLarkInn">Sean Larkin</a>\n      </td>\n    </tr>\n    <tr>\n      <td align="center">\n        <img width="150" height="150"\n        src="https://github.com/michael-ciniawsky.png?v=3&s=150">\n        </br>\n        <a href="https://github.com/michael-ciniawsky">Michael Ciniawsky</a>\n      </td>\n      <td align="center">\n        <img width="150" height="150"\n        src="https://github.com/evilebottnawi.png?v=3&s=150">\n        </br>\n        <a href="https://github.com/evilebottnawi">Evilebot Tnawi</a>\n      </td>\n      <td align="center">\n        <img width="150" height="150"\n        src="https://github.com/joscha.png?v=3&s=150">\n        </br>\n        <a href="https://github.com/joscha">Joscha Feth</a>\n      </td>\n    </tr>\n  <tbody>\n</table>\n'}});