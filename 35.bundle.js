webpackJsonp([35],{352:function(n,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default='<p>undefined](<a href="https://badge.fury.io/js/closure-webpack-plugin">https://badge.fury.io/js/closure-webpack-plugin</a>)</p>\n<p>This plugin supports the use of Google\'s Closure Tools with webpack.</p>\n<p>undefined is a full optimizing compiler and transpiler.\nIt offers unmatched optimizations, provides type checking and can easily target transpilation to different versions of ECMASCRIPT.</p>\n<p>undefined is a utility library designed for full compatibility\nwith Closure-Compiler. </p>\n<h2 id="usage-example">Usage example<a href="#usage-example" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> ClosurePlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'closure-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">ClosurePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>mode<span class="token punctuation">:</span> <span class="token string">\'STANDARD\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// compiler flags here</span>\n  <span class="token comment">//</span>\n  <span class="token comment">// for debuging help, try these:</span>\n  <span class="token comment">//</span>\n  <span class="token comment">// formatting: \'PRETTY_PRINT\'</span>\n  <span class="token comment">// debug: true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n<h2 id="options">Options<a href="#options" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<ul>\n<li>\n<p><strong>platform</strong> - <code>native</code>, <code>java</code> or <code>javascript</code>. Controls which version to use of closure-compiler.\nBy default the plugin will attempt to automatically choose the fastest option available.</p>\n<ul>\n<li><code>JAVASCRIPT</code> does not require the JVM to be installed. Not all flags are supported. </li>\n<li><code>JAVA</code> utilizes the jvm. Utilizes multiple threads for parsing and results in faster compilation for large builds.</li>\n<li><code>NATIVE</code> only available on linux or MacOS. Faster compilation times without requiring a JVM.</li>\n</ul>\n</li>\n<li>\n<p><strong>mode</strong> - <code>STANDARD</code> (default), <code>AGGRESSIVE_BUNDLE</code> or <code>NONE</code>. Controls how the plugin utilizes the compiler.<br>\n- <code>STANDARD</code> mode, closure-compiler is used as a direct replacement for other minifiers as well as most Babel transformations.<br>\n- <code>AGGRESSIVE_BUNDLE</code> mode, the compiler performs additional optimizations of modules to produce a much smaller file, but\nis not compatible with all input modules.\n- <code>NONE</code> is designed for dev mode without the compiler but still supports closure-library style dependencies.</p>\n</li>\n<li>\n<p><strong>childCompilations</strong> - boolean or function. Defaults to <code>false</code>.\nIn order to decrease build times, this plugin by default only operates on the main compilation.\nPlugins such as extract-text-plugin and html-webpack-plugin run as child compilations and\nusually do not need transpilation or minification. You can enable this for all child compilations\nby setting this option to <code>true</code>. For specific control, the option can be set to a function which\nwill be passed a compilation object.<br>\nExample: <code>function(compilation) { return /html-webpack/.test(compilation.name); }</code>.</p>\n</li>\n<li>\n<p><strong>closureLibraryBase</strong> - (optional) string. Path to the base.js file in Closure-Library.</p>\n</li>\n<li>\n<p><strong>deps</strong> - (optional) string or Array. Closures style dependency mappings. Typically generated by the\nundefined included with Closure-Library.</p>\n</li>\n<li>\n<p><strong>extraDeps</strong> - (optional) Object. Mapping of namespace to file path for closure-library provided namespaces.</p>\n</li>\n</ul>\n<h2 id="compiler-flags">Compiler Flags<a href="#compiler-flags" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>The plugin controls several compiler flags. The following flags should not be used in any mode:</p>\n<ul>\n<li>module_resolution</li>\n<li>output_wrapper</li>\n<li>dependency_mode</li>\n<li>create_source_map</li>\n<li>module</li>\n<li>entry_point</li>\n</ul>\n<h2 id="aggressive-bundle-mode">Aggressive Bundle Mode<a href="#aggressive-bundle-mode" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>In this mode, the compiler rewrites CommonJS modules and hoists require calls. Some modules are not compatible with this type of rewritting. In particular, hoisting will cause the following code to execute out of order:</p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">addPolyfillToFoo</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Aggressive Bundle Mode utilizes a custom runtime in which modules within a chunk file are all included in the same scope.\nThis avoids undefined.</p>\n<p>In Aggressive Bundle Mode, a file can only appear in a single output chunk. Use the undefined to split duplicated files into a single output chunk.</p>\n<h2 id="tips-for-use">Tips for Use<a href="#tips-for-use" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<ul>\n<li>\n<p>Don\'t use babel - closure-compiler is also a transpiler.\nIf you need undefined by closure-compiler, have babel\nonly target those features. </p>\n</li>\n</ul>\n<h2 id="maintainers">Maintainers<a href="#maintainers" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<table>\n  <tbody>\n    <tr>\n      <td align="center">\n        <a href="https://github.com/ChadKillingsworth">\n          <img width="150" alt="" height="150" src="https://avatars.githubusercontent.com/u/1247639?v=3">\n          </br>\n          Chad Killingsworth\n        </a>\n      </td>\n      <td align="center">\n        <a href="https://github.com/d3viant0ne">\n          <img width="150" alt="" height="150" src="https://avatars.githubusercontent.com/u/8420490?v=3">\n          </br>\n          Joshua Wiens\n        </a>\n      </td>\n    </tr>\n  <tbody>\n</table>\n'}});