webpackJsonp([1],{386:function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0}),s.default='<p>Originally, chunks (and modules imported inside them) were connected by a parent-child relationship in the internal webpack graph. The <code>CommonsChunkPlugin</code> was used to avoid duplicated dependencies across them, but further optimizations were not possible</p>\n<p>Since webpack v4, the <code>CommonsChunkPlugin</code> was removed in favor of <code>optimization.splitChunks</code>.</p>\n<h2 id="defaults">Defaults<a href="#defaults" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Out of the box <code>SplitChunksPlugin</code> should work great for most users.</p>\n<p>By default it only affects on-demand chunks because changing initial chunks would affect the script tags the HTML file should include to run the project.</p>\n<p>webpack will automatically split chunks based on these conditions:</p>\n<ul>\n<li>New chunk can be shared OR modules are from the <code>node_modules</code> folder</li>\n<li>New chunk would be bigger than 30kb (before min+gz)</li>\n<li>Maximum number of parallel requests when loading chunks on demand would be lower or equal to 5</li>\n<li>Maximum number of parallel requests at initial page load would be lower or equal to 3</li>\n</ul>\n<p>When trying to fulfill the last two conditions, bigger chunks are preferred.</p>\n<h2 id="configuration">Configuration<a href="#configuration" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>For developers that want to have more control over this functionality, webpack provides a set of options to better fit your needs. If you\'re changing the configuration, it\'s a good idea to measure the impact of your changes to ensure there\'s a real benefit.</p>\n<blockquote class="warning">\n<p>Default configuration was chosen to fit web performance best practices but the optimum strategy for your project might defer depending on the nature of it.</p>\n</blockquote>\n<h2 id="optimizationsplitchunks"><code>optimization.splitChunks</code><a href="#optimizationsplitchunks" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>This configuration object represents the default behavior of the <code>SplitChunksPlugin</code>.</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      chunks<span class="token punctuation">:</span> <span class="token string">\'async\'</span><span class="token punctuation">,</span>\n      minSize<span class="token punctuation">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>\n      maxSize<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      minChunks<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      maxAsyncRequests<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n      maxInitialRequests<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n      automaticNameDelimiter<span class="token punctuation">:</span> <span class="token string">\'~\'</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      cacheGroups<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        vendors<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          test<span class="token punctuation">:</span> <span class="token regex">/[\\\\/]node_modules[\\\\/]/</span><span class="token punctuation">,</span>\n          priority<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          minChunks<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n          priority<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>\n          reuseExistingChunk<span class="token punctuation">:</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="splitchunksautomaticnamedelimiter"><code>splitChunks.automaticNameDelimiter</code><a href="#splitchunksautomaticnamedelimiter" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>string</code></p>\n<p>By default webpack will generate names using origin and name of the chunk (e.g. <code>vendors~main.js</code>). This option lets you specify the delimiter to use for the generated names.</p>\n<h3 id="splitchunkschunks"><code>splitChunks.chunks</code><a href="#splitchunkschunks" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>function</code> <code>string</code></p>\n<p>This indicates which chunks will be selected for optimization. If a string is provided, possible values are <code>all</code>, <code>async</code>, and <code>initial</code>. Providing <code>all</code> can be particularly powerful because it means that chunks can be shared even between async and non-async chunks.</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// include all types of chunks</span>\n      chunks<span class="token punctuation">:</span> <span class="token string">\'all\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Alternatively, you can provide a function for more control. The return value will indicate whether to include each chunk.</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token function">chunks</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// exclude `my-excluded-chunk`</span>\n        <span class="token keyword">return</span> chunk<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">\'my-excluded-chunk\'</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="tip">\n<p>You can combine this configuration with the <a href="/plugins/html-webpack-plugin/">HtmlWebpackPlugin</a>. It will inject all the generated vendor chunks for you.</p>\n</blockquote>\n<h3 id="splitchunksmaxasyncrequests"><code>splitChunks.maxAsyncRequests</code><a href="#splitchunksmaxasyncrequests" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>number</code></p>\n<p>Maximum number of parallel requests when on-demand loading.</p>\n<h3 id="splitchunksmaxinitialrequests"><code>splitChunks.maxInitialRequests</code><a href="#splitchunksmaxinitialrequests" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>number</code></p>\n<p>Maximum number of parallel requests at an entry point.</p>\n<h3 id="splitchunksminchunks"><code>splitChunks.minChunks</code><a href="#splitchunksminchunks" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>number</code></p>\n<p>Minimum number of chunks that must share a module before splitting.</p>\n<h3 id="splitchunksminsize"><code>splitChunks.minSize</code><a href="#splitchunksminsize" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>number</code></p>\n<p>Minimum size, in bytes, for a chunk to be generated.</p>\n<h3 id="splitchunksmaxsize"><code>splitChunks.maxSize</code><a href="#splitchunksmaxsize" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>number</code></p>\n<p>Using <code>maxSize</code> (either globally <code>optimization.splitChunks.maxSize</code> per cache group <code>optimization.splitChunks.cacheGroups[x].maxSize</code> or for the fallback cache group <code>optimization.splitChunks.fallbackCacheGroup.maxSize</code>) tells webpack to try to split chunks bigger than <code>maxSize</code> into smaller parts. Parts will be at least <code>minSize</code> (next to <code>maxSize</code>) in size.\nThe algorithm is deterministic and changes to the modules will only have local impact. So that it is usable when using long term caching and doesn\'t require records. <code>maxSize</code> is only a hint and could be violated when modules are bigger than <code>maxSize</code> or splitting would violate <code>minSize</code>.</p>\n<p>When the chunk has a name already, each part will get a new name derived from that name. Depending on the value of <code>optimization.splitChunks.hidePathInfo</code> it will add a key derived from the first module name or a hash of it.</p>\n<p><code>maxSize</code> options is intended to be used with HTTP/2 and long term caching. It increase the request count for better caching. It could also be used to decrease the file size for faster rebuilding.</p>\n<blockquote class="tip">\n<p><code>maxSize</code> takes higher priority than <code>maxInitialRequest/maxAsyncRequests</code>. Actual priority is <code>maxInitialRequest/maxAsyncRequests &#x3C; maxSize &#x3C; minSize</code>.</p>\n</blockquote>\n<h3 id="splitchunksname"><code>splitChunks.name</code><a href="#splitchunksname" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>boolean: true</code> <code>function</code> <code>string</code></p>\n<p>The name of the split chunk. Providing <code>true</code> will automatically generate a name based on chunks and cache group key. Providing a string or function will allow you to use a custom name. If the name matches an entry point name, the entry point will be removed.</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token function">name</span> <span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// generate a chunk name...</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">//...</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="warning">\n<p>When assigning equal names to different split chunks, all vendor modules are placed into a single shared chunk, though it\'s not recommend since it can result in more code downloaded.</p>\n</blockquote>\n<h3 id="splitchunkscachegroups"><code>splitChunks.cacheGroups</code><a href="#splitchunkscachegroups" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Cache groups can inherit and/or override any options from <code>splitChunks.*</code>; but <code>test</code>, <code>priority</code> and <code>reuseExistingChunk</code> can only be configured on cache group level. To disable any of the default cache groups, set them to <code>false</code>.</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="splitchunkscachegroupspriority"><code>splitChunks.cacheGroups.priority</code><a href="#splitchunkscachegroupspriority" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p><code>number</code></p>\n<p>A module can belong to multiple cache groups. The optimization will prefer the cache group with a higher <code>priority</code>. The default groups have a negative priority to allow custom groups to take higher priority (default value is <code>0</code> for custom groups).</p>\n<h4 id="splitchunkscachegroupsreuseexistingchunk"><code>splitChunks.cacheGroups.reuseExistingChunk</code><a href="#splitchunkscachegroupsreuseexistingchunk" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p><code>boolean</code></p>\n<p>If the current chunk contains modules already split out from the main bundle, it will be reused instead of a new one being generated. This can impact the resulting file name of the chunk.</p>\n<h4 id="splitchunkscachegroupstest"><code>splitChunks.cacheGroups.test</code><a href="#splitchunkscachegroupstest" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p><code>function</code> <code>RegExp</code> <code>string</code></p>\n<p>Controls which modules are selected by this cache group. Omitting it selects all modules. It can match the absolute module resource path or chunk names. When a chunk name is matched, all modules in the chunk are selected.</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token function">test</span> <span class="token punctuation">(</span>chunks<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//...</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="examples">Examples<a href="#examples" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<h3 id="defaults-example-1">Defaults: Example 1<a href="#defaults-example-1" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<pre><code class="hljs language-js"><span class="token comment">// index.js</span>\n\n<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'./a\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// dynamic import</span></code></pre>\n<pre><code class="hljs language-js"><span class="token comment">// a.js</span>\n<span class="token keyword">import</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">//...</span></code></pre>\n<p><strong>Result:</strong> A separate chunk would be created containing <code>react</code>. At the import call this chunk is loaded in parallel to the original chunk containing <code>./a</code>.</p>\n<p>Why:</p>\n<ul>\n<li>Condition 1: The chunk contains modules from <code>node_modules</code></li>\n<li>Condition 2: <code>react</code> is bigger than 30kb</li>\n<li>Condition 3: Number of parallel requests at the import call is 2</li>\n<li>Condition 4: Doesn\'t affect request at initial page load</li>\n</ul>\n<p>What\'s the reasoning behind this? <code>react</code> probably won\'t change as often as your application code. By moving it into a separate chunk this chunk can be cached separately from your app code (assuming you are using chunkhash, records, Cache-Control or other long term cache approach).</p>\n<h3 id="defaults-example-2">Defaults: Example 2<a href="#defaults-example-2" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<pre><code class="hljs language-js"><span class="token comment">// entry.js</span>\n\n<span class="token comment">// dynamic imports</span>\n<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'./a\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'./b\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<pre><code class="hljs language-js"><span class="token comment">// a.js</span>\n<span class="token keyword">import</span> <span class="token string">\'./helpers\'</span><span class="token punctuation">;</span> <span class="token comment">// helpers is 40kb in size</span>\n\n<span class="token comment">//...</span></code></pre>\n<pre><code class="hljs language-js"><span class="token comment">// b.js</span>\n<span class="token keyword">import</span> <span class="token string">\'./helpers\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'./more-helpers\'</span><span class="token punctuation">;</span> <span class="token comment">// more-helpers is also 40kb in size</span>\n\n<span class="token comment">//...</span></code></pre>\n<p><strong>Result:</strong> A separate chunk would be created containing <code>./helpers</code> and all dependencies of it. At the import calls this chunk is loaded in parallel to the original chunks.</p>\n<p>Why:</p>\n<ul>\n<li>Condition 1: The chunk is shared between both import calls</li>\n<li>Condition 2: <code>helpers</code> is bigger than 30kb</li>\n<li>Condition 3: Number of parallel requests at the import calls is 2</li>\n<li>Condition 4: Doesn\'t affect request at initial page load</li>\n</ul>\n<p>Putting the content of <code>helpers</code> into each chunk will result into its code being downloaded twice. By using a separate chunk this will only happen once. We pay the cost of an additional request, which could be considered a tradeoff. That\'s why there is a minimum size of 30kb.</p>\n<h3 id="split-chunks-example-1">Split Chunks: Example 1<a href="#split-chunks-example-1" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Create a <code>commons</code> chunk, which includes all code shared between entry points.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        commons<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          name<span class="token punctuation">:</span> <span class="token string">\'commons\'</span><span class="token punctuation">,</span>\n          chunks<span class="token punctuation">:</span> <span class="token string">\'initial\'</span><span class="token punctuation">,</span>\n          minChunks<span class="token punctuation">:</span> <span class="token number">2</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="warning">\n<p>This configuration can enlarge your initial bundles, it is recommended to use dynamic imports when a module is not immediately needed.</p>\n</blockquote>\n<h3 id="split-chunks-example-2">Split Chunks: Example 2<a href="#split-chunks-example-2" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Create a <code>vendors</code> chunk, which includes all code from <code>node_modules</code> in the whole application.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      cacheGroups<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        commons<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          test<span class="token punctuation">:</span> <span class="token regex">/[\\\\/]node_modules[\\\\/]/</span><span class="token punctuation">,</span>\n          name<span class="token punctuation">:</span> <span class="token string">\'vendors\'</span><span class="token punctuation">,</span>\n          chunks<span class="token punctuation">:</span> <span class="token string">\'all\'</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="warning">\n<p>This might result in a large chunk containing all external packages. It is recommended to only include your core frameworks and utilities and dynamically load the rest of the dependencies.</p>\n</blockquote>\n'}});