webpackJsonp([152],{235:function(e,a,n){"use strict";Object.defineProperty(a,"__esModule",{value:!0}),a.default='<p>The <code>parser</code> instance, found in the <code>compiler</code>, is used to parse each module\nbeing processed by webpack. The <code>parser</code> is yet another webpack class that\nextends <code>tapable</code> and provides a variety of <code>tapable</code> hooks that can be used by\nplugin authors to customize the parsing process.</p>\n<p>The <code>parser</code> is found within <a href="/api/compiler-hooks/#normalmodulefactory">module factories</a> and therefore takes little\nmore work to access:</p>\n<pre><code class="hljs language-js">compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>normalModuleFactory<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> factory <span class="token operator">=></span> <span class="token punctuation">{</span>\n  factory<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>parser<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">\'javascript/auto\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">\'MyPlugin\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>parser<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    parser<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>someHook<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>As with the <code>compiler</code>, <code>tapAsync</code> and <code>tapPromise</code> may also be available\ndepending on the type of hook.</p>\n<h2 id="hooks">Hooks<a href="#hooks" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>The following lifecycle hooks are exposed by the <code>parser</code> and can be accessed\nas such:</p>\n<h3 id="evaluatetypeof">evaluateTypeof<a href="#evaluatetypeof" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>Evaluate the type of an identifier.</p>\n<p>Parameters: <code>expression</code></p>\n<h3 id="evaluate">evaluate<a href="#evaluate" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>Evaluate an expression.</p>\n<p>Parameters: <code>expression</code></p>\n<h3 id="evaluateidentifier">evaluateIdentifier<a href="#evaluateidentifier" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>Evaluate an identifier that is a free variable.</p>\n<p>Parameters: <code>expression</code></p>\n<h3 id="evaluatedefinedidentifier">evaluateDefinedIdentifier<a href="#evaluatedefinedidentifier" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>Evaluate an identifier that is a defined variable.</p>\n<p>Parameters: <code>expression</code></p>\n<h3 id="evaluatecallexpressionmember">evaluateCallExpressionMember<a href="#evaluatecallexpressionmember" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>Evaluate a call to a member function of a successfully evaluated expression.</p>\n<p>Parameters: <code>expression</code> <code>param</code></p>\n<h3 id="statement">statement<a href="#statement" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>General purpose hook that is called when parsing statements in a code fragment.</p>\n<p>Parameters: <code>statement</code></p>\n<h3 id="statementif">statementIf<a href="#statementif" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>statement</code></p>\n<h3 id="label">label<a href="#label" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>statement</code></p>\n<h3 id="import">import<a href="#import" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>statement</code> <code>source</code></p>\n<h3 id="importspecifier">importSpecifier<a href="#importspecifier" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>statement</code> <code>source</code> <code>exportName</code> <code>identifierName</code></p>\n<h3 id="export">export<a href="#export" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>statement</code></p>\n<h3 id="exportimport">exportImport<a href="#exportimport" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>statement</code> <code>source</code></p>\n<h3 id="exportdeclaration">exportDeclaration<a href="#exportdeclaration" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>statement</code> <code>declaration</code></p>\n<h3 id="exportexpression">exportExpression<a href="#exportexpression" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>statement</code> <code>declaration</code></p>\n<h3 id="exportspecifier">exportSpecifier<a href="#exportspecifier" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>statement</code> <code>identifierName</code> <code>exportName</code> <code>index</code></p>\n<h3 id="exportimportspecifier">exportImportSpecifier<a href="#exportimportspecifier" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>statement</code> <code>source</code> <code>identifierName</code> <code>exportName</code> <code>index</code></p>\n<h3 id="vardeclaration">varDeclaration<a href="#vardeclaration" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>declaration</code></p>\n<h3 id="vardeclarationlet">varDeclarationLet<a href="#vardeclarationlet" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>declaration</code></p>\n<h3 id="vardeclarationconst">varDeclarationConst<a href="#vardeclarationconst" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>declaration</code></p>\n<h3 id="vardeclarationvar">varDeclarationVar<a href="#vardeclarationvar" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>declaration</code></p>\n<h3 id="canrename">canRename<a href="#canrename" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>initExpression</code></p>\n<h3 id="rename">rename<a href="#rename" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>initExpression</code></p>\n<h3 id="assigned">assigned<a href="#assigned" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>expression</code></p>\n<h3 id="assign">assign<a href="#assign" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>expression</code></p>\n<h3 id="typeof">typeof<a href="#typeof" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>expression</code></p>\n<h3 id="call">call<a href="#call" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>expression</code></p>\n<h3 id="callanymember">callAnyMember<a href="#callanymember" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>expression</code></p>\n<h3 id="new">new<a href="#new" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>expression</code></p>\n<h3 id="expression">expression<a href="#expression" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>expression</code></p>\n<h3 id="expressionanymember">expressionAnyMember<a href="#expressionanymember" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>expression</code></p>\n<h3 id="expressionconditionaloperator">expressionConditionalOperator<a href="#expressionconditionaloperator" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>...</p>\n<p>Parameters: <code>expression</code></p>\n<h3 id="program">program<a href="#program" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p><code>SyncBailHook</code></p>\n<p>Get access to the abstract syntax tree (AST) of a code fragment</p>\n<p>Parameters: <code>ast</code> <code>comments</code></p>\n'}});