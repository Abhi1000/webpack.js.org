webpackJsonp([153],{234:function(n,e,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default='<p>webpack provides a Node.js API which can be used directly in Node.js runtime.</p>\n<p>The Node.js API is useful in scenarios in which you need to customize the build or development process since all the reporting and error handling must be done manually and webpack only does the compiling part. For this reason the <a href="/configuration/stats"><code>stats</code></a> configuration options will not have any effect in the <code>webpack()</code> call.</p>\n<h2 id="installation">Installation<a href="#installation" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>To start using webpack Node.js API, first install webpack if you haven’t yet:</p>\n<pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack</code></pre>\n<p>Then require the webpack module in your Node.js script:</p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Or if you prefer ES2015:</p>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> webpack <span class="token keyword">from</span> <span class="token string">\'webpack\'</span><span class="token punctuation">;</span></code></pre>\n<h2 id="webpack"><code>webpack()</code><a href="#webpack" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>The imported <code>webpack</code> function is fed a webpack <a href="/configuration/">Configuration Object</a> and runs the webpack compiler if a callback function is provided:</p>\n<pre><code class="hljs language-js-with-links">const webpack = require("webpack");\n\nwebpack({\n  // [Configuration Object](/configuration/)\n}, (err, [stats](#stats-object)) => {\n  if (err || stats.hasErrors()) {\n    // [Handle errors here](#error-handling)\n  }\n  // Done processing\n});\n</code></pre>\n<blockquote class="tip">\n<p>The <code>err</code> object <strong>will not</strong> include compilation errors and those must be handled separately using <code>stats.hasErrors()</code> which will be covered in detail in <a href="#error-handling">Error Handling</a> section of this guide. The <code>err</code> object will only contain webpack-related issues, such as misconfiguration, etc.</p>\n</blockquote>\n<blockquote class="tip">\n<p>You can provide the <code>webpack</code> function with an array of configurations. See\nthe <a href="#multicompiler">MultiCompiler</a> section below for more information.</p>\n</blockquote>\n<h2 id="compiler-instance">Compiler Instance<a href="#compiler-instance" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>If you don’t pass the <code>webpack</code> runner function a callback, it will return a\nwebpack <code>Compiler</code> instance. This instance can be used to manually trigger the\nwebpack runner or have it build and watch for changes, much like the\n<a href="/api/cli/">CLI</a>. The <code>Compiler</code> instance provides the following methods:</p>\n<ul>\n<li><code>.run(callback)</code></li>\n<li><code>.watch(watchOptions, handler)</code></li>\n</ul>\n<p>Typically, only one master <code>Compiler</code> instance is created, although child\ncompilers can be created in order to delegate specific tasks. The <code>Compiler</code> is\nultimately just a function which performs bare minimum functionality to keep a\nlifecycle running. It delegates all the loading, bundling, and writing work to\nregistered plugins.</p>\n<p>The <code>hooks</code> property on a <code>Compiler</code> instance is used to register a plugin to\nany hook event in the <code>Compiler</code>\'s lifecycle. The\n<a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsDefaulter.js"><code>WebpackOptionsDefaulter</code></a>\nand <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js"><code>WebpackOptionsApply</code></a>\nutilities are used by webpack to configure its <code>Compiler</code> instance with all the\nbuilt-in plugins.</p>\n<p>The <code>run</code> method is then used to kickstart all compilation work. Upon\ncompletion, the given <code>callback</code> function is executed. The final logging of\nstats and errors should be done in this <code>callback</code> function.</p>\n<blockquote class="warning">\n<p>The API only supports a single concurrent compilation at a time. When using\n<code>run</code>, wait for it to finish before calling <code>run</code> or <code>watch</code> again. When using\n<code>watch</code>, call <code>close</code> and wait for it to finish before calling <code>run</code> or <code>watch</code>\nagain. Concurrent compilations will corrupt the output files.</p>\n</blockquote>\n<h2 id="run">Run<a href="#run" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Calling the <code>run</code> method on the <code>Compiler</code> instance is much like the quick run\nmethod mentioned above:</p>\n<pre><code class="hljs language-js-with-links">const webpack = require("webpack");\n\nconst compiler = webpack({\n  // [Configuration Object](/configuration/)\n});\n\ncompiler.run((err, [stats](#stats-object)) => {\n  // ...\n});\n</code></pre>\n<h2 id="watching">Watching<a href="#watching" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Calling the <code>watch</code> method, triggers the webpack runner, but then watches for\nchanges (much like CLI: <code>webpack --watch</code>), as soon as webpack detects a\nchange, runs again. Returns an instance of <code>Watching</code>.</p>\n<pre><code class="hljs language-js"><span class="token function">watch</span><span class="token punctuation">(</span>watchOptions<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<pre><code class="hljs language-js-with-links">const webpack = require("webpack");\n\nconst compiler = webpack({\n  // [Configuration Object](/configuration/)\n});\n\nconst watching = compiler.watch({\n  // Example [watchOptions](/configuration/watch/#watchoptions)\n  aggregateTimeout: 300,\n  poll: undefined\n}, (err, [stats](#stats-object)) => {\n  // Print watch/build result here...\n  console.log(stats);\n});\n</code></pre>\n<p><code>Watching</code> options are covered in detail\n<a href="/configuration/watch/#watchoptions">here</a>.</p>\n<blockquote class="warning">\n<p>Filesystem inaccuracies may trigger multiple builds for a single change. So,\nin the example above, the <code>console.log</code> statement may fire multiple times for a\nsingle modification. Users should expect this behavior and may check\n<code>stats.hash</code> to see if the file hash has actually changed.</p>\n</blockquote>\n<h3 id="close-watching">Close <code>Watching</code><a href="#close-watching" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>The <code>watch</code> method returns a <code>Watching</code> instance that exposes\n<code>.close(callback)</code> method. Calling this method will end watching:</p>\n<pre><code class="hljs language-js">watching<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Watching Ended.\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="warning">\n<p>It’s not allowed to watch or run again before the existing watcher has been\nclosed or invalidated.</p>\n</blockquote>\n<h3 id="invalidate-watching">Invalidate <code>Watching</code><a href="#invalidate-watching" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Using <code>watching.invalidate</code>, you can manually invalidate the current compiling\nround, without stopping the watch process:</p>\n<pre><code class="hljs language-js">watching<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<h2 id="stats-object">Stats Object<a href="#stats-object" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>The <code>stats</code> object that is passed as a second argument of the\n<a href="#webpack"><code>webpack()</code></a> callback, is a good source of information about the\ncode compilation process. It includes:</p>\n<ul>\n<li>Errors and Warnings (if any)</li>\n<li>Timings</li>\n<li>Module and Chunk information</li>\n</ul>\n<p>The <a href="/api/cli">webpack CLI</a> uses this information to display nicely formatted\noutput in your console.</p>\n<blockquote class="tip">\n<p>When using the <a href="/api/plugins/compiler#multicompiler"><code>MultiCompiler</code></a>, a\n<code>MultiStats</code> instance is returned that fulfills the same interface as <code>stats</code>,\ni.e. the methods described below.</p>\n</blockquote>\n<p>This <code>stats</code> object exposes the following methods:</p>\n<h3 id="statshaserrors"><code>stats.hasErrors()</code><a href="#statshaserrors" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Can be used to check if there were errors while compiling. Returns <code>true</code> or\n<code>false</code>.</p>\n<h3 id="statshaswarnings"><code>stats.hasWarnings()</code><a href="#statshaswarnings" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Can be used to check if there were warnings while compiling. Returns <code>true</code> or\n<code>false</code>.</p>\n<h3 id="statstojsonoptions"><code>stats.toJson(options)</code><a href="#statstojsonoptions" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Returns compilation information as a JSON object. <code>options</code> can be either a\nstring (a preset) or an object for more granular control:</p>\n<pre><code class="hljs language-js-with-links">stats.toJson("minimal"); // [more options: "verbose", etc](/configuration/stats).\n</code></pre>\n<pre><code class="hljs language-js">stats<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  assets<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  hash<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>All available options and presets are described in the stats <a href="/configuration/stats">documentation</a>.</p>\n<blockquote>\n<p>Here’s an <a href="https://github.com/webpack/analyse/blob/master/app/pages/upload/example.json">example</a>\nof this function’s output.</p>\n</blockquote>\n<h3 id="statstostringoptions"><code>stats.toString(options)</code><a href="#statstostringoptions" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Returns a formatted string of the compilation information (similar to\n<a href="/api/cli">CLI</a> output).</p>\n<p>Options are the same as <a href="/api/node#stats-tojson-options-"><code>stats.toJson(options)</code></a> with one addition:</p>\n<pre><code class="hljs language-js">stats<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// Add console colors</span>\n  colors<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Here’s an example of <code>stats.toString()</code> usage:</p>\n<pre><code class="hljs language-js-with-links">const webpack = require("webpack");\n\nwebpack({\n  // [Configuration Object](/configuration/)\n}, (err, stats) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  console.log(stats.toString({\n    chunks: false,  // Makes the build much quieter\n    colors: true    // Shows colors in the console\n  }));\n});\n</code></pre>\n<h2 id="multicompiler">MultiCompiler<a href="#multicompiler" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>The <code>MultiCompiler</code> module allows webpack to run multiple configurations in\nseparate compilers. If the <code>options</code> parameter in the webpack\'s NodeJS api is\nan array of options, webpack applies separate compilers and calls the\n<code>callback</code> method at the end of each compiler execution.</p>\n<pre><code class="hljs language-js-with-links">var webpack = require(\'webpack\');\n\nwebpack([\n  { entry: \'./index1.js\', output: { filename: \'bundle1.js\' } },\n  { entry: \'./index2.js\', output: { filename: \'bundle2.js\' } }\n], (err, [stats](#stats-object)) => {\n  process.stdout.write(stats.toString() + "\\n");\n})\n</code></pre>\n<blockquote class="warning">\n<p>Multiple configurations will <strong>not be run in parallel</strong>. Each\nconfiguration is only processed after the previous one has finished\nprocessing. To process them in parallel, you can use a third-party solution\nlike <a href="https://www.npmjs.com/package/parallel-webpack">parallel-webpack</a>.</p>\n</blockquote>\n<h2 id="error-handling">Error Handling<a href="#error-handling" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>For a good error handling, you need to account for these three types of errors:</p>\n<ul>\n<li>Fatal webpack errors (wrong configuration, etc)</li>\n<li>Compilation errors (missing modules, syntax errors, etc)</li>\n<li>Compilation warnings</li>\n</ul>\n<p>Here’s an example that does all that:</p>\n<pre><code class="hljs language-js-with-links">const webpack = require("webpack");\n\nwebpack({\n  // [Configuration Object](/configuration/)\n}, (err, stats) => {\n  if (err) {\n    console.error(err.stack || err);\n    if (err.details) {\n      console.error(err.details);\n    }\n    return;\n  }\n\n  const info = stats.toJson();\n\n  if (stats.hasErrors()) {\n    console.error(info.errors);\n  }\n\n  if (stats.hasWarnings()) {\n    console.warn(info.warnings);\n  }\n\n  // Log result...\n});\n</code></pre>\n<h2 id="custom-file-systems">Custom File Systems<a href="#custom-file-systems" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>By default, webpack reads files and writes files to disk using a normal file\nsystem. However, it is possible to change the input or output behavior using a\ndifferent kind of file system (memory, webDAV, etc). To accomplish this, one\ncan change the <code>inputFileSystem</code> or <code>outputFileSystem</code>. For example, you can\nreplace the default <code>outputFileSystem</code> with\n<a href="https://github.com/webpack/memory-fs"><code>memory-fs</code></a> to write files to memory\ninstead of to disk:</p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> MemoryFS <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'memory-fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemoryFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* options*/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncompiler<span class="token punctuation">.</span>outputFileSystem <span class="token operator">=</span> fs<span class="token punctuation">;</span>\ncompiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Read the output later:</span>\n  <span class="token keyword">const</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'...\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n<p>Note that this is what\n<a href="https://github.com/webpack/webpack-dev-middleware">webpack-dev-middleware</a>,\nused by <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a>\nand many other packages, uses to mysteriously hide your files but continue\nserving them up to the browser!</p>\n<blockquote class="tip">\n<p>The output file system you provide needs to be compatible with Node’s own\n<a href="https://nodejs.org/api/fs.html"><code>fs</code></a> interface, which requires the <code>mkdirp</code>\nand <code>join</code> helper methods.</p>\n</blockquote>\n'}});