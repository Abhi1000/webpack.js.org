webpackJsonp([124],{263:function(n,a,s){"use strict";Object.defineProperty(a,"__esModule",{value:!0}),a.default='<p>Since version 4 webpack runs optimizations for you depending on the chosen <code>mode</code>, still all optimizations are available for manual configuration and overrides.</p>\n<h2 id="optimizationminimize"><code>optimization.minimize</code><a href="#optimizationminimize" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code></p>\n<p>Tell webpack to minimize the bundle using the <a href="/plugins/uglifyjs-webpack-plugin/">UglifyjsWebpackPlugin</a>.</p>\n<p>This is <code>true</code> by default in <code>production</code> mode.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    minimize<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="tip">\n<p>Learn how <a href="/concepts/mode/">mode</a> works.</p>\n</blockquote>\n<h2 id="optimizationminimizer"><code>optimization.minimizer</code><a href="#optimizationminimizer" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>UglifyjsWebpackPlugin | [UglifyjsWebpackPlugin]</code></p>\n<p>Allows you to override the default minimizer by providing a different one or more customized <a href="/plugins/uglifyjs-webpack-plugin/">UglifyjsWebpackPlugin</a> instances.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'uglifyjs-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    minimizer<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* your config */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="optimizationsplitchunks"><code>optimization.splitChunks</code><a href="#optimizationsplitchunks" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>object</code></p>\n<p>By default webpack v4+ provides new common chunks strategies out of the box for dynamically imported modules. See available options for configuring this behavior in the <a href="/plugins/split-chunks-plugin/">SplitChunksPlugin</a> page.</p>\n<h2 id="optimizationruntimechunk"><code>optimization.runtimeChunk</code><a href="#optimizationruntimechunk" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>object</code> <code>string</code> <code>boolean</code></p>\n<p>Setting <code>optimization.runtimeChunk</code> to <code>true</code> or <code>"multiple"</code> adds an additional chunk to each entrypoint containing only the runtime. This setting is an alias for:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    runtimeChunk<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      name<span class="token punctuation">:</span> entrypoint <span class="token operator">=></span> <span class="token template-string"><span class="token string">`runtime~</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entrypoint<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>The value <code>"single"</code> instead creates a runtime file to be shared for all generated chunks. This setting is an alias for:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    runtimeChunk<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      name<span class="token punctuation">:</span> <span class="token string">\'runtime\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>By setting <code>optimization.runtimeChunk</code> to <code>object</code> it is only possible to provide the <code>name</code> property which stands for the name or name factory for the runtime chunks.</p>\n<p>Default is <code>false</code>: each entry chunk embeds runtime.</p>\n<blockquote class="warning">\n<p>Imported modules are initialized for each runtime chunk separately, so if you include multiple entry points on a page, beware of this behavior. You will probably want to set it to <code>single</code> or use another configuration that allows you to only have one runtime instance.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    runtimeChunk<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      name<span class="token punctuation">:</span> entrypoint <span class="token operator">=></span> <span class="token template-string"><span class="token string">`runtimechunk~</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entrypoint<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="optimizationnoemitonerrors"><code>optimization.noEmitOnErrors</code><a href="#optimizationnoemitonerrors" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean</code></p>\n<p>Use the <code>optimization.noEmitOnErrors</code> to skip the emitting phase whenever there are errors while compiling. This ensures that no erroring assets are emitted. The <code>emitted</code> flag in the stats is <code>false</code> for all assets.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    noEmitOnErrors<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="warning">\n<p>If you are using webpack <a href="/api/cli/">CLI</a>, the webpack process will not exit with an error code while this plugin is enabled. If you want webpack to "fail" when using the CLI, please check out the <a href="/api/cli/#advanced-options"><code>bail</code> option</a>.</p>\n</blockquote>\n<h2 id="optimizationnamedmodules"><code>optimization.namedModules</code><a href="#optimizationnamedmodules" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean: false</code></p>\n<p>Tells webpack to use readable module identifiers for better debugging. When <code>optimization.namedModules</code> is not set in webpack config, webpack will enable it by default for <a href="/concepts/mode/">mode</a> <code>development</code> and disable for <a href="/concepts/mode/">mode</a> <code>production</code>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    namedModules<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="optimizationnamedchunks"><code>optimization.namedChunks</code><a href="#optimizationnamedchunks" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>boolean: false</code></p>\n<p>Tells webpack to use readable chunk identifiers for better debugging. This option is enabled by default for <a href="/concepts/mode/">mode</a> <code>development</code> and disabled for <a href="/concepts/mode/">mode</a> <code>production</code> if no option is provided in webpack config.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    namedChunks<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="optimizationnodeenv"><code>optimization.nodeEnv</code><a href="#optimizationnodeenv" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>string</code> <code>bool: false</code></p>\n<p>Tells webpack to set <code>process.env.NODE_ENV</code> to a given string value. <code>optimization.nodeEnv</code> uses <a href="/plugins/define-plugin/">DefinePlugin</a> unless set to <code>false</code>. <code>optimization.nodeEnv</code> <strong>defaults</strong> to <a href="/concepts/mode/">mode</a> if set, else falls back to <code>"production"</code>.</p>\n<p>Possible values:</p>\n<ul>\n<li>any string: the value to set <code>process.env.NODE_ENV</code> to.</li>\n<li>false: do not modify/set the value of <code>process.env.NODE_ENV</code>.</li>\n</ul>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    nodeEnv<span class="token punctuation">:</span> <span class="token string">\'production\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="optimizationmanglewasmimports"><code>optimization.mangleWasmImports</code><a href="#optimizationmanglewasmimports" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>bool: false</code></p>\n<p>When set to <code>true</code> tells webpack to reduce the size of WASM by changing imports to shorter strings. It mangles module and export names.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    mangleWasmImports<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="optimizationremoveavailablemodules"><code>optimization.removeAvailableModules</code><a href="#optimizationremoveavailablemodules" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>bool: true</code></p>\n<p>Tells webpack to detect and remove modules from chunks when these modules are already included in all parents. Setting <code>optimization.removeAvailableModules</code> to <code>false</code> will disable this optimization.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    removeAvailableModules<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="optimizationremoveemptychunks"><code>optimization.removeEmptyChunks</code><a href="#optimizationremoveemptychunks" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>bool: true</code></p>\n<p>Tells webpack to detect and remove chunks which are empty. Setting <code>optimization.removeEmptyChunks</code> to <code>false</code> will disable this optimization.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    removeEmptyChunks<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="optimizationmergeduplicatechunks"><code>optimization.mergeDuplicateChunks</code><a href="#optimizationmergeduplicatechunks" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>bool: true</code></p>\n<p>Tells webpack to merge chunks which contain the same modules. Setting <code>optimization.mergeDuplicateChunks</code> to <code>false</code> will disable this optimization.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    mergeDuplicateChunks<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="optimizationflagincludedchunks"><code>optimization.flagIncludedChunks</code><a href="#optimizationflagincludedchunks" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>bool</code></p>\n<p>Tells webpack to determine and flag chunks which are subsets of other chunks in a way that subsets don’t have to be loaded when the bigger chunk has been already loaded. By default <code>optimization.flagIncludedChunks</code> is enabled in <code>production</code> <a href="/concepts/mode/">mode</a> and disabled elsewise.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    flagIncludedChunks<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="optimizationoccurrenceorder"><code>optimization.occurrenceOrder</code><a href="#optimizationoccurrenceorder" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>bool</code></p>\n<p>Tells webpack to figure out an order of modules which will result in the smallest initial bundle. By default <code>optimization.occurrenceOrder</code> is enabled in <code>production</code> <a href="/concepts/mode/">mode</a> and disabled elsewise. </p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    occurrenceOrder<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="optimizationprovidedexports"><code>optimization.providedExports</code><a href="#optimizationprovidedexports" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>bool</code></p>\n<p>Tells webpack to figure out which exports are provided by modules to generate more efficient code for <code>export * from ...</code>. By default  <code>optimization.providedExports</code> is enabled. </p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    providedExports<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="optimizationusedexports"><code>optimization.usedExports</code><a href="#optimizationusedexports" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>bool</code></p>\n<p>Tells webpack to determine used exports for each module. This depends on <a href="#optimizationoccurrenceorder"><code>optimization.providedExports</code></a>. Information collected by <code>optimization.usedExports</code> is used by other optimizations or code generation i.e. exports are not generated for unused exports, export names are mangled to single char identifiers when all usages are compatible.\nDead code elimination in minimizers will benefit from this and can remove unused exports.\nBy default <code>optimization.usedExports</code> is enabled in <code>production</code> <a href="/concepts/mode/">mode</a> and disabled elsewise. </p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    usedExports<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="optimizationconcatenatemodules"><code>optimization.concatenateModules</code><a href="#optimizationconcatenatemodules" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>bool</code></p>\n<p>Tells webpack to find segments of the module graph which can be safely concatenated into a single module. Depends on <a href="#optimizationprovidedexports"><code>optimization.providedExports</code></a> and <a href="#optimizationusedexports"><code>optimization.usedExports</code></a>.\nBy default <code>optimization.concatenateModules</code> is enabled in <code>production</code> <a href="/concepts/mode/">mode</a> and disabled elsewise.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    concatenateModules<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="optimizationsideeffects"><code>optimization.sideEffects</code><a href="#optimizationsideeffects" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>bool</code></p>\n<p>Tells webpack to recognise the <a href="https://github.com/webpack/webpack/blob/master/examples/side-effects/README.md"><code>sideEffects</code></a> flag in <code>package.json</code> or rules to skip over modules which are flagged to contain no side effects when exports are not used. </p>\n<p><strong>package.json</strong></p>\n<pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"awesome npm module"</span><span class="token punctuation">,</span>\n  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>\n  <span class="token property">"sideEffects"</span><span class="token operator">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span></code></pre>\n<blockquote class="tip">\n<p>Please note that <code>sideEffects</code> should be in the npm module\'s <code>package.json</code> file and doesn\'t mean that you need to set <code>sideEffects</code> to <code>false</code> in your own project\'s <code>package.json</code> which requires that big module.</p>\n</blockquote>\n<p><code>optimization.sideEffects</code> depends on <a href="#optimization-providedexports"><code>optimization.providedExports</code></a> to be enabled. This dependency has a build time cost, but eliminating modules has positive impact on performance because of less code generation. Effect of this optimization depends on your codebase, try it for possible performance wins.</p>\n<p>By default <code>optimization.sideEffects</code> is enabled in <code>production</code> <a href="/concepts/mode/">mode</a> and disabled elsewise. </p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    sideEffects<span class="token punctuation">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n'}});