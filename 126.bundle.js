webpackJsonp([126],{261:function(e,n,s){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default='<p>These options determine how the <a href="/concepts/modules">different types of modules</a> within a project will be treated.</p>\n<h2 id="modulenoparse"><code>module.noParse</code><a href="#modulenoparse" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>RegExp | [RegExp]</code></p>\n<p><code>RegExp | [RegExp] | function</code> (since webpack 3.0.0)</p>\n<p>Prevent webpack from parsing any files matching the given regular expression(s). Ignored files <strong>should not</strong> have calls to <code>import</code>, <code>require</code>, <code>define</code> or any other importing mechanism. This can boost build performance when ignoring large libraries.</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    noParse<span class="token punctuation">:</span> <span class="token regex">/jquery|lodash/</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// since webpack 3.0.0</span>\n    noParse<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token operator">/</span>jquery<span class="token operator">|</span>lodash<span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="modulerules"><code>module.rules</code><a href="#modulerules" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>array</code></p>\n<p>An array of <a href="#rule">Rules</a> which are matched to requests when modules are created. These rules can modify how the module is created. They can apply loaders to the module, or modify the parser.</p>\n<h2 id="rule">Rule<a href="#rule" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>A Rule can be separated into three parts â€” Conditions, Results and nested Rules.</p>\n<h3 id="rule-conditions">Rule Conditions<a href="#rule-conditions" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>There are two input values for the conditions:</p>\n<ol>\n<li>\n<p>The resource: An absolute path to the file requested. It\'s already resolved according to the <a href="/configuration/resolve"><code>resolve</code> rules</a>.</p>\n</li>\n<li>\n<p>The issuer: An absolute path to the file of the module which requested the resource. It\'s the location of the import.</p>\n</li>\n</ol>\n<p><strong>Example:</strong> When we <code>import \'./style.css\'</code> within <code>app.js</code>, the resource is <code>/path/to/style.css</code> and the issuer is <code>/path/to/app.js</code>.</p>\n<p>In a Rule the properties <a href="#ruletest"><code>test</code></a>, <a href="#ruleinclude"><code>include</code></a>, <a href="#ruleexclude"><code>exclude</code></a> and <a href="#ruleresource"><code>resource</code></a> are matched with the resource and the property <a href="#ruleissuer"><code>issuer</code></a> is matched with the issuer.</p>\n<p>When using multiple conditions, all conditions must match.</p>\n<blockquote class="warning">\n<p>Be careful! The resource is the <em>resolved</em> path of the file, which means symlinked resources are the real path <em>not</em> the symlink location. This is good to remember when using tools that symlink packages (like <code>npm link</code>), common conditions like <code>/node_modules/</code> may inadvertently miss symlinked files. Note that you can turn off symlink resolving (so that resources are resolved to the symlink path) via <a href="/configuration/resolve#resolve-symlinks"><code>resolve.symlinks</code></a>.</p>\n</blockquote>\n<h3 id="rule-results">Rule results<a href="#rule-results" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<p>Rule results are used only when the Rule condition matches.</p>\n<p>There are two output values of a Rule:</p>\n<ol>\n<li>Applied loaders: An array of loaders applied to the resource.</li>\n<li>Parser options: An options object which should be used to create the parser for this module.</li>\n</ol>\n<p>These properties affect the loaders: <a href="#ruleloader"><code>loader</code></a>, <a href="#ruleoptions--rulequery"><code>options</code></a>, <a href="#ruleuse"><code>use</code></a>.</p>\n<p>For compatibility also these properties: <a href="#ruleoptions--rulequery"><code>query</code></a>, <a href="#ruleloaders"><code>loaders</code></a>.</p>\n<p>The <a href="#ruleenforce"><code>enforce</code></a> property affects the loader category. Whether it\'s a normal, pre- or post- loader.</p>\n<p>The <a href="#ruleparser"><code>parser</code></a> property affects the parser options.</p>\n<h2 id="nested-rules">Nested rules<a href="#nested-rules" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Nested rules can be specified under the properties <a href="#rulerules"><code>rules</code></a> and <a href="#ruleoneof"><code>oneOf</code></a>.</p>\n<p>These rules are evaluated when the Rule condition matches.</p>\n<h2 id="ruleenforce"><code>Rule.enforce</code><a href="#ruleenforce" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Possible values: <code>"pre" | "post"</code></p>\n<p>Specifies the category of the loader. No value means normal loader.</p>\n<p>There is also an additional category "inlined loader" which are loaders applied inline of the import/require.</p>\n<p>There are two phases that all loaders enter one after the other:</p>\n<ol>\n<li><strong>Pitching</strong> phase: the pitch method on loaders is called in the order <code>post, inline, normal, pre</code>. See <a href="/api/loaders/#pitching-loader">Pitching Loader</a> for details.</li>\n<li><strong>Normal</strong> phase: the normal method on loaders is executed in the order <code>pre, normal, inline, post</code>. Transformation on the source code of a module happens in this phase.</li>\n</ol>\n<p>All normal loaders can be omitted (overridden) by prefixing <code>!</code> in the request.</p>\n<p>All normal and pre loaders can be omitted (overridden) by prefixing <code>-!</code> in the request.</p>\n<p>All normal, post and pre loaders can be omitted (overridden) by prefixing <code>!!</code> in the request.</p>\n<p>Inline loaders and <code>!</code> prefixes should not be used as they are non-standard. They may be use by loader generated code.</p>\n<h2 id="ruleexclude"><code>Rule.exclude</code><a href="#ruleexclude" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>Rule.exclude</code> is a shortcut to <code>Rule.resource.exclude</code>. If you supply a <code>Rule.exclude</code> option, you cannot also supply a <code>Rule.resource</code>. See <a href="#ruleresource"><code>Rule.resource</code></a> and <a href="#condition"><code>Condition.exclude</code></a> for details.</p>\n<h2 id="ruleinclude"><code>Rule.include</code><a href="#ruleinclude" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>Rule.include</code> is a shortcut to <code>Rule.resource.include</code>. If you supply a <code>Rule.include</code> option, you cannot also supply a <code>Rule.resource</code>. See <a href="#ruleresource"><code>Rule.resource</code></a> and <a href="#condition"><code>Condition.include</code></a> for details.</p>\n<h2 id="ruleissuer"><code>Rule.issuer</code><a href="#ruleissuer" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>A <a href="#condition"><code>Condition</code></a> to match against the module that issued the request. In the following example, the <code>issuer</code> for the <code>a.js</code> request would be the path to the <code>index.js</code> file.</p>\n<p><strong>index.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token constant">A</span> <span class="token keyword">from</span> <span class="token string">\'./a.js\'</span><span class="token punctuation">;</span></code></pre>\n<p>This option can be used to apply loaders to the dependencies of a specific module or set of modules.</p>\n<h2 id="ruleloader"><code>Rule.loader</code><a href="#ruleloader" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>Rule.loader</code> is a shortcut to <code>Rule.use: [ { loader } ]</code>. See <a href="#ruleuse"><code>Rule.use</code></a> and <a href="#useentry"><code>UseEntry.loader</code></a> for details.</p>\n<h2 id="ruleloaders"><code>Rule.loaders</code><a href="#ruleloaders" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<blockquote class="warning">\n<p>This option is <strong>deprecated</strong> in favor of <code>Rule.use</code>.</p>\n</blockquote>\n<p><code>Rule.loaders</code> is an alias to <code>Rule.use</code>. See <a href="#ruleuse"><code>Rule.use</code></a> for details.</p>\n<h2 id="ruleoneof"><code>Rule.oneOf</code><a href="#ruleoneof" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>An array of <a href="#rule"><code>Rules</code></a> from which only the first matching Rule is used when the Rule matches.</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/.css$/</span><span class="token punctuation">,</span>\n        oneOf<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            resourceQuery<span class="token punctuation">:</span> <span class="token regex">/inline/</span><span class="token punctuation">,</span> <span class="token comment">// foo.css?inline</span>\n            use<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            resourceQuery<span class="token punctuation">:</span> <span class="token regex">/external/</span><span class="token punctuation">,</span> <span class="token comment">// foo.css?external</span>\n            use<span class="token punctuation">:</span> <span class="token string">\'file-loader\'</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="ruleoptions--rulequery"><code>Rule.options</code> / <code>Rule.query</code><a href="#ruleoptions--rulequery" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>Rule.options</code> and <code>Rule.query</code> are shortcuts to <code>Rule.use: [ { options } ]</code>. See <a href="#ruleuse"><code>Rule.use</code></a> and <a href="#useentry"><code>UseEntry.options</code></a> for details.</p>\n<blockquote class="warning">\n<p><code>Rule.query</code> is deprecated in favor of <code>Rule.options</code> and <code>UseEntry.options</code>.</p>\n</blockquote>\n<h2 id="ruleparser"><code>Rule.parser</code><a href="#ruleparser" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>An object with parser options. All applied parser options are merged.</p>\n<p>Parsers may inspect these options and disable or reconfigure themselves accordingly. Most of the default plugins interpret the values as follows:</p>\n<ul>\n<li>Setting the option to <code>false</code> disables the parser.</li>\n<li>Setting the option to <code>true</code> or leaving it <code>undefined</code> enables the parser.</li>\n</ul>\n<p>However, parser plugins may accept more than just a boolean. For example, the internal <code>NodeStuffPlugin</code> can accept an object instead of <code>true</code> to add additional options for a particular Rule.</p>\n<p><strong>Examples</strong> (parser options by the default plugins):</p>\n<pre><code class="hljs language-js-with-links">module.exports = {\n  //...\n  module: {\n    rules: [\n      {\n        //...\n        parser: {\n          amd: false, // disable AMD\n          commonjs: false, // disable CommonJS\n          system: false, // disable SystemJS\n          harmony: false, // disable ES2015 Harmony import/export\n          requireInclude: false, // disable require.include\n          requireEnsure: false, // disable require.ensure\n          requireContext: false, // disable require.context\n          browserify: false, // disable special handling of Browserify bundles\n          requireJs: false, // disable requirejs.*\n          node: false, // disable __dirname, __filename, module, require.extensions, require.main, etc.\n          node: {...} // reconfigure [node](/configuration/node) layer on module level\n        }\n      }\n    ]\n  }\n}\n</code></pre>\n<h2 id="ruleresource"><code>Rule.resource</code><a href="#ruleresource" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>A <a href="#condition"><code>Condition</code></a> matched with the resource. You can either supply a <code>Rule.resource</code> option or use the shortcut options <code>Rule.test</code>, <code>Rule.exclude</code>, and <code>Rule.include</code>. See details in <a href="#rule-conditions"><code>Rule</code> conditions</a>.</p>\n<h2 id="ruleresourcequery"><code>Rule.resourceQuery</code><a href="#ruleresourcequery" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>A <a href="#condition"><code>Condition</code></a> matched with the resource query. This option is used to test against the query section of a request string (i.e. from the question mark onwards). If you were to <code>import Foo from \'./foo.css?inline\'</code>, the following condition would match:</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/.css$/</span><span class="token punctuation">,</span>\n        resourceQuery<span class="token punctuation">:</span> <span class="token regex">/inline/</span><span class="token punctuation">,</span>\n        use<span class="token punctuation">:</span> <span class="token string">\'url-loader\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="rulerules"><code>Rule.rules</code><a href="#rulerules" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>An array of <a href="#rule"><code>Rules</code></a> that is also used when the Rule matches.</p>\n<h2 id="rulesideeffects"><code>Rule.sideEffects</code><a href="#rulesideeffects" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Possible values: <code>false | an array of paths</code></p>\n<p>Indicate what parts of the module contain side effects. See <a href="/guides/tree-shaking/#mark-the-file-as-side-effect-free">Tree Shaking</a> for details.</p>\n<h2 id="ruletest"><code>Rule.test</code><a href="#ruletest" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>Rule.test</code> is a shortcut to <code>Rule.resource.test</code>. If you supply a <code>Rule.test</code> option, you cannot also supply a <code>Rule.resource</code>. See <a href="#ruleresource"><code>Rule.resource</code></a> and <a href="#condition"><code>Condition.test</code></a> for details.</p>\n<h2 id="ruleuse"><code>Rule.use</code><a href="#ruleuse" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>A list of <a href="#useentry">UseEntries</a> which are applied to modules. Each entry specifies a loader to be used.</p>\n<p>Passing a string (i.e. <code>use: [ "style-loader" ]</code>) is a shortcut to the loader property (i.e. <code>use: [ { loader: "style-loader "} ]</code>).</p>\n<p>Loaders can be chained by passing multiple loaders, which will be applied from right to left (last to first configured).</p>\n<pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token comment">//...</span>\n        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token string">\'style-loader\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              importLoaders<span class="token punctuation">:</span> <span class="token number">1</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            loader<span class="token punctuation">:</span> <span class="token string">\'less-loader\'</span><span class="token punctuation">,</span>\n            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              noIeCompat<span class="token punctuation">:</span> <span class="token boolean">true</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>See <a href="#useentry">UseEntry</a> for details.</p>\n<h2 id="condition"><code>Condition</code><a href="#condition" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Conditions can be one of these:</p>\n<ul>\n<li>A string: To match the input must start with the provided string. I. e. an absolute directory path, or absolute path to the file.</li>\n<li>A RegExp: It\'s tested with the input.</li>\n<li>A function: It\'s called with the input and must return a truthy value to match.</li>\n<li>An array of Conditions: At least one of the Conditions must match.</li>\n<li>An object: All properties must match. Each property has a defined behavior.</li>\n</ul>\n<p><code>{ test: Condition }</code>: The Condition must match. The convention is to provide a RegExp or array of RegExps here, but it\'s not enforced.</p>\n<p><code>{ include: Condition }</code>: The Condition must match. The convention is to provide a string or array of strings here, but it\'s not enforced.</p>\n<p><code>{ exclude: Condition }</code>: The Condition must NOT match. The convention is to provide a string or array of strings here, but it\'s not enforced.</p>\n<p><code>{ and: [Condition] }</code>: All Conditions must match.</p>\n<p><code>{ or: [Condition] }</code>: Any Condition must match.</p>\n<p><code>{ not: [Condition] }</code>: All Conditions must NOT match.</p>\n<p><strong>Example:</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/\\.css$/</span><span class="token punctuation">,</span>\n        include<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'app/styles\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'vendor/styles\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="useentry"><code>UseEntry</code><a href="#useentry" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><code>object</code></p>\n<p>It must have a <code>loader</code> property being a string. It is resolved relative to the configuration <a href="/configuration/entry-context#context"><code>context</code></a> with the loader resolving options (<a href="/configuration/resolve#resolveloader">resolveLoader</a>).</p>\n<p>It can have an <code>options</code> property being a string or object. This value is passed to the loader, which should interpret it as loader options.</p>\n<p>For compatibility a <code>query</code> property is also possible, which is an alias for the <code>options</code> property. Use the <code>options</code> property instead.</p>\n<p><strong>Example:</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        loader<span class="token punctuation">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n          modules<span class="token punctuation">:</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Note that webpack needs to generate a unique module identifier from the resource and all loaders including options. It tries to do this with a <code>JSON.stringify</code> of the options object. This is fine in 99.9% of cases, but may be not unique if you apply the same loaders with different options to the resource and the options have some stringified values.</p>\n<p>It also breaks if the options object cannot be stringified (i.e. circular JSON). Because of this you can have a <code>ident</code> property in the options object which is used as unique identifier.</p>\n<h2 id="module-contexts">Module Contexts<a href="#module-contexts" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<blockquote>\n<p>Avoid using these options as they are <strong>deprecated</strong> and will soon be removed.</p>\n</blockquote>\n<p>These options describe the default settings for the context created when a dynamic dependency is encountered.</p>\n<p>Example for an <code>unknown</code> dynamic dependency: <code>require</code>.</p>\n<p>Example for an <code>expr</code> dynamic dependency: <code>require(expr)</code>.</p>\n<p>Example for an <code>wrapped</code> dynamic dependency: <code>require("./templates/" + expr)</code>.</p>\n<p>Here are the available options with their <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsDefaulter.js">defaults</a>:</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    exprContextCritical<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    exprContextRecursive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    exprContextRegExp<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    exprContextRequest<span class="token punctuation">:</span> <span class="token string">\'.\'</span><span class="token punctuation">,</span>\n    unknownContextCritical<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    unknownContextRecursive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    unknownContextRegExp<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    unknownContextRequest<span class="token punctuation">:</span> <span class="token string">\'.\'</span><span class="token punctuation">,</span>\n    wrappedContextCritical<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    wrappedContextRecursive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    wrappedContextRegExp<span class="token punctuation">:</span> <span class="token regex">/.*/</span><span class="token punctuation">,</span>\n    strictExportPresence<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment">// since webpack 2.3.0</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote class="tip">\n<p>You can use the <code>ContextReplacementPlugin</code> to modify these values for individual dependencies. This also removes the warning.</p>\n</blockquote>\n<p>A few use cases:</p>\n<ul>\n<li>Warn for dynamic dependencies: <code>wrappedContextCritical: true</code>.</li>\n<li><code>require(expr)</code> should include the whole directory: <code>exprContextRegExp: /^\\.\\//</code></li>\n<li><code>require("./templates/" + expr)</code> should not include subdirectories by default: <code>wrappedContextRecursive: false</code></li>\n<li><code>strictExportPresence</code> makes missing exports an error instead of warning</li>\n</ul>\n'}});